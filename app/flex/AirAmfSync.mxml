<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
  xmlns:generated="airamfsync.views.generated.*"
  paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"
  layout="horizontal" styleName="plain" initialize="init()">
  <mx:Script>
    <![CDATA[
      import flash.events.ProgressEvent;
    
      import air.net.SocketMonitor;
      
      import mx.utils.ObjectUtil;
      
      import com.adobe.serialization.json.JSON;
      
      import org.restfulx.events.PullEndEvent;
      import org.restfulx.events.PullStartEvent;
      import org.restfulx.events.PushEndEvent;
      import org.restfulx.events.PushStartEvent;
      import org.restfulx.controllers.ChangeController;
      import org.restfulx.controllers.AuxAIRController;
      import org.restfulx.services.ISyncingServiceProvider;
      import org.restfulx.services.http.XMLHTTPServiceProvider;
      import org.restfulx.services.air.AIRServiceProvider;
      import org.restfulx.services.amf.AMFServiceProvider;
      import org.restfulx.Rx;
      import org.restfulx.XRx;
      
      import airamfsync.controllers.ApplicationController;
      import airamfsync.models.Address;
      import airamfsync.models.Business;

      [Bindable]
      private var socketMonitor:SocketMonitor;

      [Bindable]
      private var online:Boolean;

      [Bindable]
      private var syncStatus:String;
      
      [Bindable]
      private var progressUpdate:String;
      
      private var airController:AuxAIRController;
      
      private function init():void {
        Rx.enableLogging();
        Rx.httpRootUrl = "http://localhost:3000/";
        Rx.enableSync = true;

        socketMonitor = new SocketMonitor("localhost", 3000);
        socketMonitor.pollInterval = 2000; /* miliseconds */
        socketMonitor.addEventListener(StatusEvent.STATUS, onNetworkStatusChange);
        socketMonitor.start();
        
        ApplicationController.initialize([AIRServiceProvider, AMFServiceProvider], 
          AMFServiceProvider.ID, "airamfsync");

        Rx.changes.setSyncProviders(
          ISyncingServiceProvider(Rx.services.getServiceProvider(AIRServiceProvider.ID)),
            Rx.services.getServiceProvider(AMFServiceProvider.ID));
            
        Rx.models.addEventListener(ProgressEvent.PROGRESS, onProgressUpdate);

        Rx.changes.addEventListener(PushStartEvent.ID, onPushStart);
        Rx.changes.addEventListener(PushEndEvent.ID, onPushEnd);
        Rx.changes.addEventListener(PullStartEvent.ID, onPullStart);
        Rx.changes.addEventListener(PullEndEvent.ID, onPullEnd);
        
        airController = XRx.air(function(result:Object):void {
          if (result.toString() == "SUCCESS") {
            syncStatus = "Sync complete. All records pushed to local database.";
          }
        });
      }
      
      private function onProgressUpdate(event:ProgressEvent):void {
        progressUpdate = "Downloaded: " + event.bytesLoaded + "B out of: " + event.bytesTotal + "B";
      }

      private function onPushStart(event:Event):void {
        syncStatus = "Pushing changes ...";
      }

      private function onPushEnd(event:Event):void {
        syncStatus = "Push complete.";
      }

      private function onPullStart(event:Event):void {
        syncStatus = "Pulling data...";
      }

      private function onPullEnd(event:Event):void {
        syncStatus = "Pull complete.";
      }

      private function onNetworkStatusChange(event:StatusEvent):void {
        online = (socketMonitor.available) ? true : false;
  
        if (online) {
          Rx.defaultServiceId = AMFServiceProvider.ID;
        } else {
          Rx.defaultServiceId = AIRServiceProvider.ID;
        }
      }

      private function getCurrentProviderName(id:int):String {
        switch (id) {
          case AMFServiceProvider.ID:
            return "Rails (AMF)";
          case AIRServiceProvider.ID:
            return "AIR (SQLite)";
          default :
            return "No idea";
        }
      }
      
      private function pull():void {
        syncStatus = "Pulling data...";
        Rx.http(onPull).invoke("pull/businesses.json");
      }
      
      private function onPull(result:String):void {
        syncStatus = "Pushing data to local database ..."
        var results:Array = JSON.decode(result) as Array;
        var statements:Array = new Array;
        for each (var item:Object in results) {
          var business:Object = item["business"]
          var statement:SQLStatement = new SQLStatement;
          statement.text = "insert or replace into businesses(email, mobile_phone, phone, " + 
            "name, fax, new_business, business_number, id, rev, sync) values(:email, :mobile_phone, " + 
            ":phone, :name, :fax, :new_business, :business_number, :id, :rev, :sync)";
          statement.parameters[":email"] = business["email"];
          statement.parameters[":mobile_phone"] = business["mobile_phone"];
          statement.parameters[":phone"] = business["phone"];
          statement.parameters[":name"] = business["name"];
          statement.parameters[":fax"] = business["fax"];
          statement.parameters[":new_business"] = business["new_business"];
          statement.parameters[":business_number"] = business["business_number"];
          statement.parameters[":id"] = business["id"];
          statement.parameters[":rev"] = 0;
          statement.parameters[":sync"] = "";
          statements.push(statement);
        }        
        
        airController.executeAnySQLInBulk(Business, statements);
      }
    ]]>
  </mx:Script>
  <mx:VBox height="100%">
    <mx:Label text="Current Provider: {getCurrentProviderName(Rx.defaultServiceId)}"/>
    <mx:Label text="Status: {online ? 'Online' : 'Offline' }"/>
    <mx:HBox>
      <mx:Button label="Push" click="{Rx.changes.push()}" enabled="{online}"/>
      <mx:Button label="Pull" click="{Rx.changes.pull(Business)}" enabled="{online}"/>
    </mx:HBox>
    <mx:Label text="{progressUpdate}"/>
    <mx:Label text="{syncStatus}"/>
  </mx:VBox>
  <mx:LinkBar dataProvider="{mainViewStack}" direction="vertical" borderStyle="solid" backgroundColor="#EEEEEE"/>
  <mx:ViewStack id="mainViewStack" width="100%" height="100%">
    <!-- For a simple demo, put all the components here. -->
    <!-- <generated:AddressBox/> -->
    <generated:BusinessBox/>
  </mx:ViewStack>
</mx:WindowedApplication>
